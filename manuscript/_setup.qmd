```{r}
#| label: load R packages

library("dplyr")
library("kableExtra")
library("ggplot2")
library("viridis")
library('palmerpenguins')
library('tidyr')
library("dplyr")
library("rpart")
library("DALEX")
library("ceterisParibus")
library("randomForest")
library('mlr')
library('iml')
library('patchwork')
library('grid')
library('gridExtra')
library('ranger')
```

```{r}
#| label: penguin data and models
set.seed(2)
penguins = na.omit(penguins)
penguins_col_selection = c('species', 'bill_depth_mm', 'bill_length_mm', 'flipper_length_mm', 'sex', 'body_mass_g') 
penguins2 = penguins[penguins_col_selection] 
penguin_train_index <- sample(1:nrow(penguins2), 2/3 * nrow(penguins2))
penguins_train <- penguins2[penguin_train_index, ]
penguins_test <- penguins2[-penguin_train_index, ]
penguins_rf = randomForest(species ~ ., data = penguins_train)
```

```{r}
#| label: bike data and models
set.seed(42)
load("../data/bike.RData")

bike_train_index <- sample(1:nrow(bike), 2/3 * nrow(bike))
bike_train <- bike[bike_train_index, ]
bike_test <- bike[-bike_train_index, ]
bike_rf = randomForest(cnt~ ., data = bike_train)
bike_tree = rpart(cnt ~ ., data = bike_train)
bike_svm = e1071::svm(cnt ~ ., data = bike_train)

mae = function(actual, predicted){ mean(abs(actual - predicted)) }

#print("MAE SVM")
#print(mae(bike_test$cnt, predict(bike_svm, bike_test)))
#print("MAE tree")
#print(mae(bike_test$cnt, predict(bike_tree, bike_test)))
#print("MAE random forest")
#print(mae(bike_test$cnt, predict(bike_rf, bike_test)))

```


```{r}
#| label: load data
set.seed(42)

## Load datasets
load("../data/ycomments.RData")
```

```{r}
my_theme = function(legend.position='right'){
  theme_bw() %+replace%
    theme(legend.position=legend.position)
}

theme_set(my_theme())


default_color = "azure4"

pretty_rownames = function(rnames){
  rnames = gsub('^`', '', rnames)
  rnames = gsub('`$', '', rnames)
  rnames = gsub('`', ':', rnames)
  rnames
}


#' Plot coefficients of a linear model
coef_plot = function(mod, alpha = 0.05, remove_intercept = TRUE){
  lm_summary = summary(mod)$coefficients
  rownames(lm_summary) = pretty_rownames(rownames(lm_summary))

  df = data.frame(Features = rownames(lm_summary),
    Estimate = lm_summary[,'Estimate'],
    std_error = lm_summary[,'Std. Error'])
  df$lower = df$Estimate - qnorm(alpha/2) * df$std_error
  df$upper = df$Estimate + qnorm(alpha/2) * df$std_error


  if(remove_intercept){
    df = df[!(df$Features == '(Intercept)'),]
  }
  require("ggplot2")
  ggplot(df) +
    geom_vline(xintercept=0, linetype=4) +
    geom_point(aes(x=Estimate, y=Features)) +
    geom_segment(aes(y=Features, yend=Features, x=lower, xend=upper), arrow = arrow(angle=90, ends='both', length = unit(0.1, 'cm'))) +
    scale_x_continuous('Weight estimate') +
    my_theme()
}

#' Plot effects of linear model
effect_plot = function(mod, dat,  feature_names=NULL){
  X = get_effects(mod, dat)
  if(!missing(feature_names)){
    rownames(X) = feature_names
  }
  X = tidyr::gather(X)
  require("ggplot2")
  ggplot(X) +
    geom_hline(yintercept=0, linetype=4) +
    geom_boxplot(aes(x=key, y=value, group=key)) +
    coord_flip() +
    scale_y_continuous('Feature effect') +
    my_theme()
}

get_reference_dataset = function(dat){
  df = lapply(dat, function(feature){
    if(class(feature) == 'factor'){
      factor(levels(feature)[1], levels = levels(feature))
    } else {
      0
    }
  })
  data.frame(df)
}

get_effects = function(mod, dat){

  X = data.frame(predict(mod, type = 'terms'))

  # Nicer colnames
  colnames(X) = gsub('^X\\.', '', colnames(X))
  colnames(X) = gsub('\\.', ' ', colnames(X))

  # predict with type='terms' centers the results, so we have to add the mean again
  reference_X = predict(mod, newdata=get_reference_dataset(dat), type='terms')
  X_star = data.frame(t(apply(X, 1, function(x){ x - reference_X[1,names(X)]})))
  X_star
}


```

