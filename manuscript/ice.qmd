# Individual Conditional Expectation (ICE) {#ice}

{{< include _setup.qmd >}}

Individual Conditional Expectation (ICE) plots display one line per instance that shows how the instance's prediction changes when a feature changes. 

An ICE plot [@goldstein2015peeking] visualizes the dependence of the prediction on a feature for *each* instance separately, resulting in one line per instance of a dataset.
The values for a line (and one instance) can be computed by keeping all other features the same, creating variants of this instance by replacing the feature's value with values from a grid and making predictions with the black box model for these newly created instances.
The result is a set of points for an instance with the feature value from the grid and the respective predictions.
In other words, ICE plots are all the [ceteris paribus curves](#ceteris-paribus) for a dataset in one plot.

A more formal definition:
In ICE plots, for each instance in $\{(x_{S}^{(i)},x_{C}^{(i)})\}_{i=1}^N$ the curve $\hat{f}_S^{(i)}$ is plotted against $x^{(i)}_{S}$, while $x^{(i)}_{C}$ remains fixed.

## Examples

@fig-ice-bike shows ICE plots for the [bike rental prediction](#bike-data).
The underlying prediction model is a random forest.

```{r}
#| label: fig-ice-bike
#| fig-cap: "ICE plots of predicted bicycle rentals by weather conditions."
#| fig-height: 4
pred.bike = Predictor$new(bike_rf, bike_test)

p1 = FeatureEffect$new(pred.bike, "temp", method = "ice")$plot() + scale_x_continuous("Temperature") + 
  scale_y_continuous("Predicted bicycle rentals")
p2 = FeatureEffect$new(pred.bike, "hum", method = "ice")$plot() + scale_x_continuous("Humidity") + scale_y_continuous("")
p3 = FeatureEffect$new(pred.bike, "windspeed", method = "ice")$plot() + scale_x_continuous("Windspeed")+ scale_y_continuous("")
gridExtra::grid.arrange(p1, p2, p3, ncol = 3)
```

All curves seem to follow the same course, so there are no obvious interactions.

Let's go back to the [penguin classification task](#penguins) and see how the prediction of each instance is related to the feature "bill_length_mm".
We will analyze a random forest that predicts the probability of a penguin being female given body measurements.

```{r}
#| label: fig-ice-penguins
#| fig-cap: ICE plot of P(Adelie) by bill length. Each line represents a penguin.
pred.penguins = Predictor$new(pengu_rf, penguins_test, class = "female")
ice = FeatureEffect$new(pred.penguins, "bill_length_mm", method = "ice")$plot() + 
  scale_color_discrete(guide='none') + 
  scale_y_continuous('P(female)')
ice
```

@fig-ice-penguins is a rather ugly ICE plot.
But sometimes that's the reality.
The reason is that the model is rather sure for most penguins and quickly changes between 0 and 1.

## Centered ICE Plot

There is a problem with ICE plots:
Sometimes it can be hard to tell whether the ICE curves differ between individuals because they start at different predictions.
A simple solution is to center the curves at a certain point in the feature and  display only the difference in the prediction to this point.
The resulting plot is called centered ICE plot (c-ICE).
Anchoring the curves at the lower end of the feature is a good choice.
The new curves are defined as:

$$\hat{f}_{cent}^{(i)}=\hat{f}^{(i)}-\mathbf{1}\hat{f}(x^{a},x^{(i)}_{C})$$

where $\mathbf{1}$ is a vector of 1's with the appropriate number of dimensions (usually one or two), $\hat{f}$ is the fitted model and x^a^ is the anchor point.

### Example


Let's have a look at centered ICE plots for the bicycle rental prediction:

```{r}
#| label: ice-bike-centered
#| fig-cap: "Centered ICE plots of predicted number of bikes by weather condition. The lines show the difference in prediction compared to the prediction with the respective feature value at its observed minimum."
#| fig-height: 3.3
predictor = Predictor$new(bike_rf, data = bike_test)
ytext1 = sprintf("Different to prediction at temp = %.1f", min(bike$temp))
ice1 = FeatureEffect$new(predictor, feature = "temp", center.at = min(bike$temp), method = "pdp+ice")$plot() +
  scale_y_continuous(ytext1)
ytext2 = sprintf("Different to prediction at hum = %.1f", min(bike$hum))
ice2 = FeatureEffect$new(predictor, feature = "hum", center.at = min(bike$hum), method = "pdp+ice")$plot() +
  scale_y_continuous(ytext2)
ytext3 = sprintf("Different to prediction at windspeed = %.1f", min(bike$windspeed))
ice3 = FeatureEffect$new(predictor, feature = "windspeed", center.at = min(bike$windspeed), method = "pdp+ice")$plot() +
  scale_y_continuous(ytext3)
gridExtra::grid.arrange(ice1, ice2, ice3, nrow = 1)
```

The centered ICE plots make it easier to compare the curves of individual instances.
This can be useful if we do not want to see the absolute change of a predicted value, but the difference in the prediction compared to a fixed point of the feature range.

For example, take the penguin ICE plot for bill length and center the lines on the penguin with the shortest bill length.

```{r}
#|label: ice-penguins-centered
#| fig-cap: !expr sprintf("Centered ICE plot for predicted P(female) by bill length. Lines are fixed to 0 at bill length %.0f. Compared to bill length %.0f, P(female) gets lower for increasing bill length.", min(penguins$bill_length_mm), min(penguins$bill_length_mm))
#| fig-height: 4 

predictor = Predictor$new(pengu_rf, data = penguins_test, class = "female")
ice = FeatureEffect$new(predictor, feature = "bill_length_mm", center.at = min(penguins$bill_length_mm), method = "ice")
ice$plot()  +
  scale_color_discrete(guide='none') +
  scale_y_continuous(sprintf('Difference in P(female) to bill length %.0f', min(penguins$bill_length_mm))) 
```

But still, this model does not lend itself to ICE plots very much.
At least we know thanks to the ICE curves that most probability are either 0 or 1.


## Derivative ICE Plot

Another way to make it visually easier to spot heterogeneity is to look at the individual derivatives of the prediction function with respect to a feature.
The resulting plot is called the derivative ICE plot (d-ICE).
The derivatives of a function (or curve) tell you whether changes occur and in which direction they occur.
With the derivative ICE plot, it is easy to spot ranges of feature values where the black box predictions change for (at least some) instances.
If there is no interaction between the analyzed feature $x_S$ and the other features $x_C$, then the prediction function can be expressed as:

$$\hat{f}(x)=\hat{f}(x_S,x_C)=g(x_S)+h(x_C),\quad\text{with}\quad\frac{\delta\hat{f}(x)}{\delta{}x_S}=g'(x_S)$$

Without interactions, the individual partial derivatives should be the same for all instances.
If they differ, it is due to interactions and it becomes visible in the d-ICE plot.
In addition to displaying the individual curves for the derivative of the prediction function with respect to the feature in S, showing the standard deviation of the derivative helps to highlight regions in feature in S with heterogeneity in the estimated derivatives.
The derivative ICE plot takes a long time to compute and is rather impractical.


## Strengths

Individual conditional expectation curves are **intuitive to understand**. 
One line represents the predictions for one instance if we vary the feature of interest. 

ICE curves can **uncover heterogeneous relationships**.

## Limitations 

ICE curves **can only display one feature** meaningfully, because two features would require the drawing of several overlaying surfaces and you would not see anything in the plot.

ICE curves suffer from correlation: If the feature of interest is correlated with the other features, then **some points in the lines might be invalid data points** according to the joint feature distribution. 

If many ICE curves are drawn, the **plot can become overcrowded** and you will not see anything. 
The solution: Either add some transparency to the lines or draw only a sample of the lines.

In ICE plots it might not be easy to **see the average**. 
This has a simple solution:
Combine individual conditional expectation curves with the [partial dependence plot](#pdp).

## Software and Alternatives

ICE plots are implemented in the R packages `iml` [@molnar2018iml] (used for these examples), `ICEbox` [@goldstein2017package], and `pdp`.
Another R package that does something very similar to ICE is `condvis`.
In Python, you can use [PiML](https://selfexplainml.github.io/PiML-Toolbox/_build/html/index.html) [@sudjianto2023piml].

