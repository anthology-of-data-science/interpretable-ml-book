# Methods Overview

The previous chapters were very theoretical.
We will soon get into the actual methods, but before that I want to give you a "map" of the approaches for interpretable machine learning.

```{mermaid}
%%| label: taxonomy
%%| fig-cap: Short taxonomy of IML methods which also reflects the structure of the book.
%%| fig-align: center
graph TD
    A[ML interpretability]
    A --> B[by-design]
    A --> C[post-hoc]
    C --> D[model-agnostic]
    C --> E[model-specific]
    D --> F[local]
    D --> G[global]
```


In general we can distinguish between interpretability by design and post-hoc interpretability.
By design means that we already incorporate interpretability when training the model, like using logistic regression instead of a random forest, or using constraints for xgboost to only model monotonic relations.
Post-hoc interpretability means that we apply some IML method after the model was trained.
Post-hoc methods can be model-agnostic, like computing permutation feature importance or specific to a certain type of model, like analyzing the features learned by a neural network.
I will introduce these categories separately, but its useful to think of them as complementary, not "either-or".

When it comes to this book, here is how the categories are weighted:

- "by-design": Only the basic ones
- "model-agnostic": Clearly the focus of the book
- "model-specific": Only containing methods specific to neural networks.

<!-- 

TODO: Include the 3 images

-->



## Interpretable models by design 

With "by-design", I mean ML algorithms that have constraints to produce interpretable models.
That's why this approach may also be called **intrinsically** or **inherently** interpretable models.
Interpretability by design is a spectrum:
Let's call these two ends "inherently interpretable" and "enhanced interpretability". TODO: find better names.
One one end, you have ML algorithms like linear regression which only produces linear models and which may be seen as completely interpretable (not everyone would agree, though).
On the other end of interpretability-by-design, you have slight modifications of complex models to make them more interpretable, like restricting the tree depth of a tree ensemble so that it only contains main effects and interactions between two features.
So this other end of the spectrum kind of incldues "interpretability by accident" or rather "interpretability because this simple model was good enough".
No matter where on the spectrum, interprebaility by design is all about setting constraints already dureing the model training, it therefore is a modification of the ML algorithm or training process (can also mean making features more interpretable).
This can range from making sure that somehow the entire model is interpretable to just "increasing" interpretability by only allowing monotonic relations to be modeled.

![](./images/specific-black-box.png)

This book covers the most basic interpretability by design approaches: [linear regression](#limo), [logistic regression](#logistic), [other linear model extensions](#extend-lm), [decision trees](#tree), [decision rules](#rules), and [RuleFit](#rulefit).
This field is much, much bigger than I represent in the book, and purpose is rather to introduce the basics, since many approaches are building upon these standard versions presented here.

In general interpretability-by-design means there are coefficients to interpret, or decions-rule structures or prototypes to understand the prediction with, like  Interpretability by design can get fairly complex and stretch as far as the interpretation of the word "interpretation" can go.
What they have in common is that they have a prescribed way of how to interpret them.
Often described by the authors of the methods themselves.

What's currently completely missing from the book are the new and the shiny, and the ones where it's even harder to clearly say yes to whether they are truly interpretable. 
Some examples:

- Prototype-based neural network for image classification [@ma2024interpretable]
- @yang2024inherently and suggest "inherently interpretable tree ensemble" and one part is to adjust hyperparameters (like maximum tree depth of only 2 or 3) and adding monotonicity constraint among others to make them more interpretable by design. The paper also introduces other pruning steps to reduce number of effects. 


But it is a spectrum, there is no magical cut-off between an "inherently" interpretable model and a complex model made more interpretable by designing it a bit differently.
But what is clear: Interpretability-by-design is "bought" by adding constraints that forces the models to take on an interpretable shape.:e 
Adding constraints has the potential of making the model less performant.
In terms of a search, it makes the search space smaller.
Let's say that the optimal model would be a support vector machine, but if you only allow linear regression mdoels, you will have a sub-optimal model.
So there is typically a trade-off between interpretability by design and predictive performance.
By definition it has to be smaller or equal.

However, interpretability-by-design is itself bigger than just intepretability.
Since when you can design for interpretability, you typically also design for other things, like robustness and infusion of domain knowledge.


## Post-Hoc Interpretability

Post-hoc methods are all methods that are applied after the model was trained.
This means they don't affect the model training.

::: {.callout-tip}

You can apply post-hoc methods to models that are interprerable by-design.

:::

How does this work?
There's two routes to this:

- Model-agnostic: We ignore what's *inside* the model and only analyze howthe prediction function behaves. 
- Model-specific: We take some parts of the model and try to analyze them to better understand the model. This can work by assigning meaning to parts of the model, like trying to see what a neuron in a neural network responds most to, but also give us feature-based summaries like feature importance (e.g. Gini importance in random forests).



### Model-Agnostic Methods {#agnostic}

Separating the explanations from the machine learning model (= model-agnostic interpretation methods) has some advantages (Ribeiro, Singh, and Guestrin 2016 [@ribeiro2016model]).
The great advantage of model-agnostic interpretation methods over model-specific ones is their flexibility.
Machine learning developers are free to use any machine learning model they like when the interpretation methods can be applied to any model.
Anything that builds on an interpretation of a machine learning model, such as a graphic or user interface, also becomes independent of the underlying machine learning model.
Typically, not just one, but many types of machine learning models are evaluated to solve a task, and when comparing models in terms of interpretability, it is easier to work with model-agnostic explanations, because the same method can be used for any type of model.

![](./images/agnostic-black-box.png)

Desirable aspects of a model-agnostic explanation system are (Ribeiro, Singh, and Guestrin 2016):

- **Model flexibility:**
The interpretation method can work with any machine learning model, such as random forests and deep neural networks.
- **Explanation flexibility:**
You are not limited to a certain form of explanation.
In some cases it might be useful to have a linear formula, in other cases a graphic with feature importances.
- **Representation flexibility:**
The explanation system should be able to use a different feature representation as the model being explained.
For a text classifier that uses abstract word embedding vectors, it might be preferable to use the presence of individual words for the explanation.

However, some argue we shouldn't try to explain black-box algorithms at all, at least not when it comes to high-stakes decisions. [@rudin2019stop]


**The bigger picture**

Let's take a high level look at model-agnostic interpretability.
We capture the world by collecting data, and abstract it further by learning to predict the data (for the task) with a machine learning model.
Interpretability is just another layer on top that helps humans understand.


![The big picture of explainable machine learning. The real world goes through many layers before it reaches the human in the form of explanations.](./images/big-picture.png){#fig-big-picture}

The lowest layer is the **World**.
This could literally be nature itself, like the biology of the human body and how it reacts to medication, but also more abstract things like the real estate market.
The World layer contains everything that can be observed and is of interest.
Ultimately, we want to learn something about the World and interact with it.

The second layer is the **Data** layer.
We have to digitize the World in order to make it processable for computers and also to store information.
The Data layer contains anything from images, texts, tabular data and so on.

By fitting machine learning models based on the Data layer, we get the **Black Box Model** layer.
Machine learning algorithms learn with data from the real world to make predictions or find structures.

Above the Black Box Model layer is the **Interpretability Methods** layer, which helps us deal with the opacity of machine learning models.
What were the most important features for a particular diagnosis?
Why was a financial transaction classified as fraud?

The last layer is occupied by a **Human**.
Look! This one waves to you because you are reading this book and helping to provide better explanations for black box models!
Humans are ultimately the consumers of the explanations.

This multi-layered abstraction also helps to understand the differences in approaches between statisticians and machine learning practitioners.
Statisticians deal with the Data layer, such as planning clinical trials or designing surveys.
They skip the Black Box Model layer and go right to the Interpretability Methods layer.
Machine learning specialists also deal with the Data layer, such as collecting labeled samples of skin cancer images or crawling Wikipedia.
Then they train a black box machine learning model.
The Interpretability Methods layer is skipped and humans directly deal with the black box model predictions.
It's great that interpretable machine learning fuses the work of statisticians and machine learning specialists.

Of course this graphic does not capture everything:
Data could come from simulations.
Black box models also output predictions that might not even reach humans, but only supply other machines, and so on.
But overall it is a useful abstraction to understand how interpretability becomes this new layer on top of machine learning models.

Model-agnostic interpretation methods can be further distinguished into local and global methods.
The book is also organized according to this distinction.
[Global methods](#global-methods) describe how features affect the prediction **on average**.
In contrast, [local methods](#local-methods) aim to explain **individual predictions**.


#### Global Model-Agnostic Methods {#global-methods}

Global methods describe the average behavior of a machine learning model.
The counterpart to global methods are [local methods](#local-methods).
Global methods are often expressed as expected values based on the distribution of the data.
For example, the [partial dependence plot](#pdp), a feature effect plot, is the expected prediction when all other features are marginalized out.
Since global interpretation methods describe average behavior, they are particularly useful when the modeler wants to understand the general mechanisms in the data or debug a model.

In this book, you will learn about the following model-agnostic global interpretation techniques:

* The [partial dependence plot](#pdp) is a feature effect method.
* [Accumulated local effect plots](#ale) is another feature effect method that works when features are dependent.
* [Feature interaction (H-statistic)](#interaction) quantifies to what extent the prediction is the result of joint effects of the features.
* [Functional decomposition](#decomposition) is a central idea of interpretability and a technique that decomposes the complex prediction function into smaller parts.
* [Permutation feature importance](#feature-importance) measures the importance of a feature as an increase in loss when the feature is permuted.
* [Global surrogate models](#global) replaces the original model with a simpler model for interpretation.
* [Prototypes and criticisms](#proto) are representative data point of a distribution and can be used to enhance interpretability.

#### Local Model-Agnostic Methods {#local-methods}

Local interpretation methods explain individual predictions.
In this chapter, you will learn about the following local explanation methods:

* [Individual conditional expectation curves](#ice) are the building blocks for [partial dependence plots](#pdp) and describe how changing a feature changes the prediction.
* [Local surrogate models (LIME)](#lime) explain a prediction by replacing the complex model with a locally interpretable surrogate model.
* [Scoped rules (anchors)](#anchors) are rules that describe which feature values anchor a prediction, in the sense that they lock the prediction in place.
* [Counterfactual explanations](#counterfactual) explain a prediction by examining which features would need to be changed to achieve a desired prediction.
* [Shapley values](#shapley) are an attribution method that fairly assigns the prediction to individual features.
* [SHAP](#shap) is another computation method for Shapley values, but also proposes global interpretation methods based on combinations of Shapley values across the data.

LIME and Shapley values are attribution methods, so that the prediction of a single instance is described as the sum of feature effects.
Other methods, such as [counterfactual explanations](#counterfactual), are example-based.




### Model-specific methods

As the name says, these are 

![](./images/specific-black-box.png)

Like Gini importance etc.

<!-- Why not interpretable -->
To make predictions with a neural network, the data input is passed through many layers of multiplication with the learned weights and through non-linear transformations.
A single prediction can involve millions of mathematical operations depending on the architecture of the neural network.
There is no chance that we humans can follow the exact mapping from data input to prediction.
We would have to consider millions of weights that interact in a complex way to understand a prediction by a neural network.
To interpret the behavior and predictions of neural networks, we need specific interpretation methods.
The chapters assume that you are  familiar with deep learning, including convolutional neural networks.

<!-- Why specific interpretation -->
We can certainly use [model-agnostic methods](#agnostic), such as [local models](#lime) or [partial dependence plots](#pdp), but there are two reasons why it makes sense to consider interpretation methods developed specifically for neural networks:
First, neural networks learn features and concepts in their hidden layers and we need special tools to uncover them.
Second, the gradient can be utilized to implement interpretation methods that are more computationally efficient than model-agnostic methods that look at the model "from the outside".
Also most other methods in this book are intended for the interpretation of models for tabular data.
Image and text data require different methods.

The next chapters cover the following techniques that answer different questions:

- [Learned Features](#feature-visualization): What features has the neural network learned?
- [Pixel Attribution (Saliency Maps)](#pixel-attribution): How did each pixel contribute to a particular prediction?
- [Concepts](#neural-concepts): Which more abstract concepts has the neural network learned?
-  [Adversarial Examples](#adversarial) are closely related to [counterfactual explanations](#counterfactual): How can we trick the neural network?
-  [Influential Instances](#influential) is a more general approach with a fast implementation for gradient-based methods such as neural networks: How influential was a training data point for a certain prediction?



## Combine them 

Don't think you have decide for one approach.
Be flexible.
Examples:

- You train random forest, but find out that logistic regression works with similar performance, maybe slighlty less. You switch to logistic regressio nand reap the benefits of interpreting the coefficients.
- Due to regulatory reasons, you are only allowed to use decision-rules. However, for better debugging, you still rely on model-agnostic methods like [LOFO](#lofo).
- You train an tree ensemble with xgboost. You find out that setting max depth to two produces good enough models and comes with the advantage of 

The lines are blurry anyways:

- Many wouldn't hesitate to put "logistic regression" as interpretability-by-design. But to get the log odds, we have to do post-hoc interpretation, in the sense that we have to compute the log odds. It's just a transfomration of the coefficients, but where is the transiation between that and e.g. neuraon activation maximization?  
- [SHAP](#shap) is a "model-agnostic" method, but when applied to a linear regression model, it gives you pre-defined effect values that are centered by the expected effects. If you had calculated the centered effects, then you would call it still intepretable by-design.
- 



## Attic

I have a pet theory that we can categorize "inherently interpretable mdoels" into 3 categories.
These are true for both the repreentation of models and how we produce explanations.

- Weighted sum of features: Allows interpretation of the coefficients as linear effects. Example: linear regression.
- Decision rules: Makes for simple if-else explanations. Example: Decision tree.
- Reference data points: Example: kmeans.

Examples for weighted sums:

- WE have the linear regression model
- But also the logistic model is a weighted sum, just on another level
- same goes for all the lm extensions

The weighted sums allow us to assign a value to a feature (coefficient or weight)

For if-else rules we have decision rules and decision lists.

Then there are also combinations between the two, like rulefit 

Not represented here are the other models with data points.
like k-means or k-nn.
These are typically not cited as interpretable, since it only works when you can easily understand the other data points. 






